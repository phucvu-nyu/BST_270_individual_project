),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Percentage value
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # Bar
)
)
))
# Render the table
raw_html<-as.character(table_1)
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
raw_html
browsable(HTML(raw_html))
?arrange
table_1<-candy_data|>
mutate(RK=rank(-winpercent))|>
select(RK,competitorname,winpercent)|>
arrange(winpercent)|>
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|>
formattable(list(
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Percentage value
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # Bar
)
)
))
# Render the table
raw_html<-as.character(table_1)
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
raw_html
browsable(HTML(raw_html))
table_1<-candy_data|>
mutate(RK=rank(-winpercent))|>
select(RK,competitorname,winpercent)|>
arrange(desc(winpercent))|>
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|>
formattable(list(
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Percentage value
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # Bar
)
)
))
# Render the table
raw_html<-as.character(table_1)
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
raw_html
browsable(HTML(raw_html))
table_1<-candy_data|>
mutate(RK=rank(-winpercent),
winpercent=round(winpercent,1))|>
select(RK,competitorname,winpercent)|>
arrange(desc(winpercent))|>
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|>
formattable(list(
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Percentage value
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # Bar
)
)
))
# Render the table
raw_html<-as.character(table_1)
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
raw_html
browsable(HTML(raw_html))
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/blob/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
url <- "https://github.com/fivethirtyeight/data/blob/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/blob/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
write.csv(candy_data, file='../data/candy-data.csv', quote=FALSE, row.names = FALSE)
if (!requireNamespace("formattable", quietly = TRUE)) {
install.packages("formattable")
}
if (!requireNamespace("htmltools", quietly = TRUE)) {
install.packages("htmltools")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
library(formattable)
library(htmltools)
library(tidyverse)
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
write.csv(candy_data, file='../data/candy-data.csv', quote=FALSE, row.names = FALSE)
table_1<-candy_data|>
mutate(RK=rank(-winpercent),
winpercent=round(winpercent,1))|>
select(RK,competitorname,winpercent)|>
arrange(desc(winpercent))|>
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|>
formattable(list(
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Percentage value
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # Bar
)
)
),
align = c("l", "l", "l"))
# Render the table
raw_html<-as.character(table_1)
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
raw_html
browsable(HTML(raw_html))
if (!requireNamespace("formattable", quietly = TRUE)) {
install.packages("formattable")
}
if (!requireNamespace("htmltools", quietly = TRUE)) {
install.packages("htmltools")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
library(formattable)
library(htmltools)
library(tidyverse)
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv"
candy_data <- read.csv(url)
write.csv(candy_data, file='../data/candy-data.csv', quote=FALSE, row.names = FALSE)
table_1<-candy_data|>
mutate(RK=rank(-winpercent), # use winpercent as ranking, with highest winpercent to be rank 1
winpercent=round(winpercent,1))|> # round up the winpercent for aesthetic
select(RK,competitorname,winpercent)|> # select only 3 columns to recreate the table
arrange(desc(winpercent))|># rearrange the rows from the highest to lowest win percent
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|> # rename the columns to match the table
# in the original article
formattable(list( # use formattable to add the color bar based on the winpercent
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Add percentage value after the number
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # add the color bar that has width = 1.5* percent win
)
)
),
align = c("l", "l", "l") # change alignment of the three columns to all left aligned
)
# Render the table
raw_html<-as.character(table_1) # extract the raw html table
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
browsable(HTML(raw_html)) # Display the table
lm(winpercent~chocolate+fruity+caramel+peanutyalmondy+nougat+crispedricewafer+hard+bar+pluribus,data=candy_data)
lm(winpercent~chocolate+fruity+caramel+peanutyalmondy+nougat+crispedricewafer+hard+bar+pluribus,data=candy_data)$coef
component_coef<-lm(winpercent~chocolate+fruity+caramel+peanutyalmondy+nougat+crispedricewafer+hard+bar+pluribus,data=data)$coef[-1]
component_coef<-lm(winpercent~chocolate+fruity+caramel+peanutyalmondy+nougat+crispedricewafer+hard+bar+pluribus,data=candy_data)$coef[-1]
component_coef
components<-names(component_coef)
components
component_avg<-sapply(components,function(x) candy_data$winpercent[candy_data[x]==1])
component_avg
component_avg<-sapply(components,function(x) mean(candy_data$winpercent[candy_data[x]==1]))
component_avg
component_avg<-round(component_avg,0)
table2
component_coef<-lm(winpercent~chocolate+
fruity+caramel+
peanutyalmondy+nougat+
crispedricewafer+hard+
bar+pluribus,
data=candy_data)$coef[-1]
component_coef<-round(component_coef,1)
components<-names(component_coef)
component_avg<-sapply(components,
function(x) mean(candy_data$winpercent[candy_data[x]==1]))
component_avg<-round(component_avg,0)
table2<-data.frame(CANDYTYPE=components,
`AVG. WIN SHARE`=component_avg,
`VALUE ADD TO WIN %`=component_coef)
table2
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add_%`=component_coef)
table2
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)
table2
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))
table2
library(formattable)
# Create the data frame
candy_data <- data.frame(
CANDY_TYPE = c("Chocolate", "Fruit", "Peanuts & nuts", "Crispy", "Caramel", "Nougat", "Multi-piece", "Candy bar", "Hard candy"),
AVG_WIN_SHARE = c(61, 44, 57, 64, 60, 66, 41, 61, 47),
VALUE_ADD = c(19.9, 10.3, 10.1, 9.0, 3.4, 2.4, -0.2, -0.7, -4.9)
)
# Format the table
formatted_table <- formattable(candy_data, list(
AVG_WIN_SHARE = color_tile("white", "lightblue"),
VALUE_ADD = formatter(
"span",
style = x ~ ifelse(x > 0, style(color = "green"), style(color = "red")),
x ~ sprintf("%.1f", x)
)
))
formatted_table
library(formattable)
# Create the data frame
candy_data <- data.frame(
CANDY_TYPE = c("Chocolate", "Fruit", "Peanuts & nuts", "Crispy", "Caramel", "Nougat", "Multi-piece", "Candy bar", "Hard candy"),
AVG_WIN_SHARE = c(61, 44, 57, 64, 60, 66, 41, 61, 47),
VALUE_ADD = c(19.9, 10.3, 10.1, 9.0, 3.4, 2.4, -0.2, -0.7, -4.9)
)
# Format the table
formatted_table <- formattable(candy_data, list(
VALUE_ADD = formatter(
"span",
style = x ~ ifelse(x > 0,
style(display = "block", padding = "5px", background = "lightblue", color = "black"),
style(display = "block", padding = "5px", background = "pink", color = "black")),
x ~ sprintf("%.1f", x)
)
))
formatted_table
library(formattable)
# Create the data frame
candy_data <- data.frame(
CANDY_TYPE = c("Chocolate", "Fruit", "Peanuts & nuts", "Crispy", "Caramel", "Nougat", "Multi-piece", "Candy bar", "Hard candy"),
AVG_WIN_SHARE = c(61, 44, 57, 64, 60, 66, 41, 61, 47),
VALUE_ADD = c(19.9, 10.3, 10.1, 9.0, 3.4, 2.4, -0.2, -0.7, -4.9)
)
# Normalize the values to scale the color intensity
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Format the table
formatted_table <- formattable(candy_data, list(
VALUE_ADD = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.2, 0.6, 1, alpha = normalize(x)), # Blue for positive values, intensity based on value
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values, intensity based on value
),
color = "black"
),
x ~ sprintf("%.1f", x)
)
))
formatted_table
library(formattable)
# Create the data frame
candy_data <- data.frame(
CANDY_TYPE = c("Chocolate", "Fruit", "Peanuts & nuts", "Crispy", "Caramel", "Nougat", "Multi-piece", "Candy bar", "Hard candy"),
AVG_WIN_SHARE = c(61, 44, 57, 64, 60, 66, 41, 61, 47),
VALUE_ADD = c(19.9, 10.3, 10.1, 9.0, 3.4, 2.4, -0.2, -0.7, -4.9)
)
# Normalize the values to scale the color intensity
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Format the table
formatted_table <- formattable(candy_data, list(
VALUE_ADD = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.4, 1, 0.4, alpha = normalize(x)), # Green for positive values, intensity based on value
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values, intensity based on value
),
color = "black"
),
x ~ ifelse(x > 0, paste0("+", sprintf("%.1f", x)), sprintf("%.1f", x)) # Add "+" for positive values
)
))
formatted_table
data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))|>
rename(`CANDY TYPE`=candytype,`AVG. WIN SHARE`=avg_win_share,`VALUE ADD TO WIN %`=value_add)
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))|>
rename(`CANDY TYPE`=candytype,
`AVG. WIN SHARE`=avg_win_share,
`VALUE ADD TO WIN %`=value_add)|>
formattable( list(
VALUE_ADD = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.6, 0.8, 1, alpha = normalize(x)), # Light blue for positive values
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values
),
color = "black"
),
x ~ ifelse(x > 0,
paste0("+", sprintf("%.1f", x)),
sprintf("%.1f", x)) # Add "+" for positive values
)
),align = c("l", "r", "r"))
table2
component_coef<-lm(winpercent~chocolate+
fruity+caramel+
peanutyalmondy+nougat+
crispedricewafer+hard+
bar+pluribus,
data=candy_data)$coef[-1]
# check if the environment has the required libraries
if (!requireNamespace("formattable", quietly = TRUE)) {
install.packages("formattable")
}
if (!requireNamespace("htmltools", quietly = TRUE)) {
install.packages("htmltools")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Loading necessary libraries
library(formattable)
library(htmltools)
library(tidyverse)
# Specify the url of the candy data
url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv"
# read in the candy data
candy_data <- read.csv(url)
# store the candy data in the data folwer
write.csv(candy_data, file='../data/candy-data.csv', quote=FALSE, row.names = FALSE)
table_1<-candy_data|>
mutate(RK=rank(-winpercent), # use winpercent as ranking, with highest winpercent to be rank 1
winpercent=round(winpercent,1))|> # round up the winpercent for aesthetic
select(RK,competitorname,winpercent)|> # select only 3 columns to recreate the table
arrange(desc(winpercent))|># rearrange the rows from the highest to lowest win percent
rename(CANDY=competitorname,`WIN PERCENT`=winpercent)|> # rename the columns to match the table
# in the original article
formattable(list( # use formattable to add the color bar based on the winpercent
`WIN PERCENT` = formatter("span",
style = x ~ style(
display = "flex",  # Use flex layout for alignment
"align-items" = "center",         # Align percentage and bar vertically
"gap" = "10px"                    # Add spacing between number and bar
),
x ~ paste0(
'<span style="display:inline-block; text-align:left; width:35px;">', x, '%</span>',  # Add percentage value after the number
'<span style="display:inline-block; width:', x * 1.5, 'px; height:10px; background-color:orange;"></span>'  # add the color bar that has width = 1.5* percent win
)
)
),
align = c("l", "l", "l") # change alignment of the three columns to all left aligned
)
# Render the table
raw_html<-as.character(table_1) # extract the raw html table
raw_html <- gsub( "&lt;","<", raw_html)    # Escape '<'
raw_html <- gsub("&gt;",">", raw_html)    # Escape '>'
browsable(HTML(raw_html)) # Display the table
component_coef<-lm(winpercent~chocolate+
fruity+caramel+
peanutyalmondy+nougat+
crispedricewafer+hard+
bar+pluribus,
data=candy_data)$coef[-1]
component_coef<-round(component_coef,1)
components<-names(component_coef)
component_avg<-sapply(components,
function(x) mean(candy_data$winpercent[candy_data[x]==1]))
component_avg<-round(component_avg,0)
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))|>
rename(`CANDY TYPE`=candytype,
`AVG. WIN SHARE`=avg_win_share,
`VALUE ADD TO WIN %`=value_add)|>
formattable( list(
VALUE_ADD = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.6, 0.8, 1, alpha = normalize(x)), # Light blue for positive values
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values
),
color = "black"
),
x ~ ifelse(x > 0,
paste0("+", sprintf("%.1f", x)),
sprintf("%.1f", x)) # Add "+" for positive values
)
),align = c("l", "r", "r"))
component_coef<-lm(winpercent~chocolate+
fruity+caramel+
peanutyalmondy+nougat+
crispedricewafer+hard+
bar+pluribus,
data=candy_data)$coef[-1]
component_coef<-round(component_coef,1)
components<-names(component_coef)
component_avg<-sapply(components,
function(x) mean(candy_data$winpercent[candy_data[x]==1]))
component_avg<-round(component_avg,0)
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))|>
rename(`CANDY TYPE`=candytype,
`AVG. WIN SHARE`=avg_win_share,
`VALUE ADD TO WIN %`=value_add)|>
formattable( list(
`VALUE ADD TO WIN %` = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.6, 0.8, 1, alpha = normalize(x)), # Light blue for positive values
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values
),
color = "black"
),
x ~ ifelse(x > 0,
paste0("+", sprintf("%.1f", x)),
sprintf("%.1f", x)) # Add "+" for positive values
)
),align = c("l", "r", "r"))
table2
component_coef<-lm(winpercent~chocolate+
fruity+caramel+
peanutyalmondy+nougat+
crispedricewafer+hard+
bar+pluribus,
data=candy_data)$coef[-1]
component_coef<-round(component_coef,1)
components<-names(component_coef)
component_avg<-sapply(components,
function(x) mean(candy_data$winpercent[candy_data[x]==1]))
component_avg<-round(component_avg,0)
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
components<-c("Chocolate","Fruit","Caramel","Peanuts & nuts","Nougat","Crispy","Hard candy","Candy bar","Multi-piece")
table2<-data.frame(candytype=components,
`avg_win_share`=component_avg,
`value_add`=component_coef)|>arrange(desc(value_add))|>
rename(`CANDY TYPE`=candytype,
`AVG. WIN SHARE`=avg_win_share,
`VALUE ADD TO WIN %`=value_add)|>
formattable( list(
`VALUE ADD TO WIN %` = formatter(
"span",
style = x ~ style(
display = "block",
padding = "5px",
background = ifelse(
x > 0,
rgb(0.6, 0.8, 1, alpha = normalize(x)), # Light blue for positive values
rgb(1, 0.4, 0.4, alpha = normalize(abs(x))) # Red for negative values
),
color = "black"
),
x ~ ifelse(x > 0,
paste0("+", sprintf("%.1f", x)),
sprintf("%.1f", x)) # Add "+" for positive values
)
),align = c("l", "r", "r"))
rownames(table2)<-NULL
table2
